(define (domain gripper-strips)
 (:requirements :strips :typing) 
 (:types room object robot gripper num)
 (:predicates (at_robby ?r - robot ?x - room)
 	      (at ?o - object ?x - room)
	      (free ?r - robot ?g - gripper)
	      (carry ?r - robot ?o - object ?g - gripper)
             ;; DCK states
              ;(DCK_idle ?r - robot)
              (DCK_idle)
              (DCK_loading ?r - robot ?dest - room)
              (DCK_unloading ?r - robot ?dest - room)
             ;; DCK memory
              (g_At ?o - object ?x - room)
              (mIdle ?o - object ?x - room)
              (mCarry ?r - robot ?n - num)
              (next ?n1 ?n2 - num)
              (minCnt ?n - num)
 )

   (:action move_DCK_idle
       :parameters  (?r - robot ?from ?to - room) ;?o - object)
       :precondition (and  (at_robby ?r ?from)
                           ;(DCK_idle ?r)
                           (DCK_idle)
                           ;(mIdle ?o ?to)
                           
                     )
       :effect (and  (at_robby ?r ?to)
		     (not (at_robby ?r ?from))))

   (:action move_DCK_loading
       :parameters  (?r - robot ?from ?to - room) ;?o - object)
       :precondition (and  (at_robby ?r ?from)
                           (DCK_loading ?r ?to)
                           
                     )
       :effect (and  (at_robby ?r ?to)
		     (not (at_robby ?r ?from))
                     (not (DCK_loading ?r ?to))
                     (DCK_unloading ?r ?to)
               )
   )

   (:action pick_DCK_idle
       :parameters (?r - robot ?obj - object ?room - room ?g - gripper ?room2 - room ?n1 ?n2 - num)
       :precondition  (and  (at ?obj ?room) 
                            (at_robby ?r ?room) 
                            (free ?r ?g)
                            ;(DCK_idle ?r)
                            (DCK_idle)
                            (mIdle ?obj ?room)
                            (mCarry ?r ?n1)
                            (next ?n1 ?n2)
                            (g_At ?obj ?room2)
                      )
       :effect (and (carry ?r ?obj ?g)
		    (not (at ?obj ?room)) 
		    (not (free ?r ?g))
                    ;(not (DCK_idle ?r))
                    (not (DCK_idle))
                    (DCK_loading ?r ?room2)
                    (not (mIdle ?obj ?room))
                    (not (mCarry ?r ?n1))
                    (mCarry ?r ?n2)
               )
   )

   (:action pick_DCK_loading
       :parameters (?r - robot ?obj - object ?room - room ?g - gripper ?room2 - room ?n1 ?n2 - num)
       :precondition  (and  (at ?obj ?room) 
                            (at_robby ?r ?room) 
                            (free ?r ?g)
                            (DCK_loading ?r ?room2)
                            (mIdle ?obj ?room)
                            (mCarry ?r ?n1)
                            (next ?n1 ?n2)
                            (g_At ?obj ?room2)
                      )
       :effect (and (carry ?r ?obj ?g)
		    (not (at ?obj ?room)) 
		    (not (free ?r ?g))
                    (not (mIdle ?obj ?room))
                    (not (mCarry ?r ?n1))
                    (mCarry ?r ?n2)
               )
   )

   (:action drop_DCK_unloading
       :parameters (?r - robot ?obj - object ?room - room ?g - gripper ?n1 ?n2 - num)
       :precondition  (and  (carry ?r ?obj ?g) 
                            (at_robby ?r ?room)
                            (DCK_unloading ?r ?room)
                            (mCarry ?r ?n1)
                            (next ?n2 ?n1)
                            (g_At ?obj ?room)
                            (not (minCnt ?n2))
                      )
       :effect (and (at ?obj ?room)
		    (free ?r ?g)
		    (not (carry ?r ?obj ?g))
                    (not (mCarry ?r ?n1))
                    (mCarry ?r ?n2)
                    (not (g_At ?obj ?room))
               )
   )


   (:action drop_DCK_idle
       :parameters (?r - robot ?obj - object ?room - room ?g - gripper ?n1 ?n2 - num)
       :precondition  (and  (carry ?r ?obj ?g) 
                            (at_robby ?r ?room)
                            (DCK_unloading ?r ?room)
                            (mCarry ?r ?n1)
                            (next ?n2 ?n1)
                            (g_At ?obj ?room)
                            (minCnt ?n2)
                      )
       :effect (and (at ?obj ?room)
		    (free ?r ?g)
		    (not (carry ?r ?obj ?g))
                    (not (DCK_unloading ?r ?room))
                    ;(DCK_idle ?r)
                    (DCK_idle)
                    (not (mCarry ?r ?n1))
                    (mCarry ?r ?n2)
                    (not (g_At ?obj ?room))
               )
   )

)
